{"remainingRequest":"D:\\JavaWebVue\\javaweb-ui\\node_modules\\thread-loader\\dist\\cjs.js!D:\\JavaWebVue\\javaweb-ui\\node_modules\\babel-loader\\lib\\index.js!D:\\JavaWebVue\\javaweb-ui\\node_modules\\element-ui\\lib\\utils\\date-util.js","dependencies":[{"path":"D:\\JavaWebVue\\javaweb-ui\\node_modules\\element-ui\\lib\\utils\\date-util.js","mtime":499162500000},{"path":"D:\\JavaWebVue\\javaweb-ui\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\JavaWebVue\\javaweb-ui\\node_modules\\thread-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\JavaWebVue\\javaweb-ui\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}