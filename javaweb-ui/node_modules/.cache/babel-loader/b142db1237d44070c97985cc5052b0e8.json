{"remainingRequest":"D:\\JavaWebVue\\javaweb-ui\\node_modules\\thread-loader\\dist\\cjs.js!D:\\JavaWebVue\\javaweb-ui\\node_modules\\babel-loader\\lib\\index.js!D:\\JavaWebVue\\javaweb-ui\\node_modules\\element-ui\\lib\\input.js","dependencies":[{"path":"D:\\JavaWebVue\\javaweb-ui\\node_modules\\element-ui\\lib\\input.js","mtime":499162500000},{"path":"D:\\JavaWebVue\\javaweb-ui\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\JavaWebVue\\javaweb-ui\\node_modules\\thread-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\JavaWebVue\\javaweb-ui\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:cmVxdWlyZSgiY29yZS1qcy9tb2R1bGVzL2VzLnN5bWJvbCIpOwoKcmVxdWlyZSgiY29yZS1qcy9tb2R1bGVzL2VzLnN5bWJvbC5kZXNjcmlwdGlvbiIpOwoKcmVxdWlyZSgiY29yZS1qcy9tb2R1bGVzL2VzLnN5bWJvbC50by1zdHJpbmctdGFnIik7CgpyZXF1aXJlKCJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuY29uY2F0Iik7CgpyZXF1aXJlKCJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuam9pbiIpOwoKcmVxdWlyZSgiY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5Lm1hcCIpOwoKcmVxdWlyZSgiY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5LnNsaWNlIik7CgpyZXF1aXJlKCJjb3JlLWpzL21vZHVsZXMvZXMuZnVuY3Rpb24ubmFtZSIpOwoKcmVxdWlyZSgiY29yZS1qcy9tb2R1bGVzL2VzLmpzb24udG8tc3RyaW5nLXRhZyIpOwoKcmVxdWlyZSgiY29yZS1qcy9tb2R1bGVzL2VzLm1hdGgudG8tc3RyaW5nLXRhZyIpOwoKcmVxdWlyZSgiY29yZS1qcy9tb2R1bGVzL2VzLm51bWJlci5jb25zdHJ1Y3RvciIpOwoKcmVxdWlyZSgiY29yZS1qcy9tb2R1bGVzL2VzLm9iamVjdC50by1zdHJpbmciKTsKCnZhciBfdHlwZW9mID0gcmVxdWlyZSgiRDovSmF2YVdlYlZ1ZS9qYXZhd2ViLXVpL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL3R5cGVvZiIpOwoKbW9kdWxlLmV4cG9ydHMgPQovKioqKioqLwpmdW5jdGlvbiAobW9kdWxlcykgewogIC8vIHdlYnBhY2tCb290c3RyYXAKCiAgLyoqKioqKi8KICAvLyBUaGUgbW9kdWxlIGNhY2hlCgogIC8qKioqKiovCiAgdmFyIGluc3RhbGxlZE1vZHVsZXMgPSB7fTsKICAvKioqKioqLwoKICAvKioqKioqLwogIC8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uCgogIC8qKioqKiovCgogIGZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHsKICAgIC8qKioqKiovCgogICAgLyoqKioqKi8KICAgIC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZQoKICAgIC8qKioqKiovCiAgICBpZiAoaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0pIHsKICAgICAgLyoqKioqKi8KICAgICAgcmV0dXJuIGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdLmV4cG9ydHM7CiAgICAgIC8qKioqKiovCiAgICB9CiAgICAvKioqKioqLwogICAgLy8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSkKCiAgICAvKioqKioqLwoKCiAgICB2YXIgbW9kdWxlID0gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0gPSB7CiAgICAgIC8qKioqKiovCiAgICAgIGk6IG1vZHVsZUlkLAoKICAgICAgLyoqKioqKi8KICAgICAgbDogZmFsc2UsCgogICAgICAvKioqKioqLwogICAgICBleHBvcnRzOiB7fQogICAgICAvKioqKioqLwoKICAgIH07CiAgICAvKioqKioqLwoKICAgIC8qKioqKiovCiAgICAvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb24KCiAgICAvKioqKioqLwoKICAgIG1vZHVsZXNbbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pOwogICAgLyoqKioqKi8KCiAgICAvKioqKioqLwogICAgLy8gRmxhZyB0aGUgbW9kdWxlIGFzIGxvYWRlZAoKICAgIC8qKioqKiovCgogICAgbW9kdWxlLmwgPSB0cnVlOwogICAgLyoqKioqKi8KCiAgICAvKioqKioqLwogICAgLy8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGUKCiAgICAvKioqKioqLwoKICAgIHJldHVybiBtb2R1bGUuZXhwb3J0czsKICAgIC8qKioqKiovCiAgfQogIC8qKioqKiovCgogIC8qKioqKiovCgogIC8qKioqKiovCiAgLy8gZXhwb3NlIHRoZSBtb2R1bGVzIG9iamVjdCAoX193ZWJwYWNrX21vZHVsZXNfXykKCiAgLyoqKioqKi8KCgogIF9fd2VicGFja19yZXF1aXJlX18ubSA9IG1vZHVsZXM7CiAgLyoqKioqKi8KCiAgLyoqKioqKi8KICAvLyBleHBvc2UgdGhlIG1vZHVsZSBjYWNoZQoKICAvKioqKioqLwoKICBfX3dlYnBhY2tfcmVxdWlyZV9fLmMgPSBpbnN0YWxsZWRNb2R1bGVzOwogIC8qKioqKiovCgogIC8qKioqKiovCiAgLy8gZGVmaW5lIGdldHRlciBmdW5jdGlvbiBmb3IgaGFybW9ueSBleHBvcnRzCgogIC8qKioqKiovCgogIF9fd2VicGFja19yZXF1aXJlX18uZCA9IGZ1bmN0aW9uIChleHBvcnRzLCBuYW1lLCBnZXR0ZXIpIHsKICAgIC8qKioqKiovCiAgICBpZiAoIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBuYW1lKSkgewogICAgICAvKioqKioqLwogICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgbmFtZSwgewogICAgICAgIGVudW1lcmFibGU6IHRydWUsCiAgICAgICAgZ2V0OiBnZXR0ZXIKICAgICAgfSk7CiAgICAgIC8qKioqKiovCiAgICB9CiAgICAvKioqKioqLwoKICB9OwogIC8qKioqKiovCgogIC8qKioqKiovCiAgLy8gZGVmaW5lIF9fZXNNb2R1bGUgb24gZXhwb3J0cwoKICAvKioqKioqLwoKCiAgX193ZWJwYWNrX3JlcXVpcmVfXy5yID0gZnVuY3Rpb24gKGV4cG9ydHMpIHsKICAgIC8qKioqKiovCiAgICBpZiAodHlwZW9mIFN5bWJvbCAhPT0gJ3VuZGVmaW5lZCcgJiYgU3ltYm9sLnRvU3RyaW5nVGFnKSB7CiAgICAgIC8qKioqKiovCiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsKICAgICAgICB2YWx1ZTogJ01vZHVsZScKICAgICAgfSk7CiAgICAgIC8qKioqKiovCiAgICB9CiAgICAvKioqKioqLwoKCiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7CiAgICAgIHZhbHVlOiB0cnVlCiAgICB9KTsKICAgIC8qKioqKiovCiAgfTsKICAvKioqKioqLwoKICAvKioqKioqLwogIC8vIGNyZWF0ZSBhIGZha2UgbmFtZXNwYWNlIG9iamVjdAoKICAvKioqKioqLwogIC8vIG1vZGUgJiAxOiB2YWx1ZSBpcyBhIG1vZHVsZSBpZCwgcmVxdWlyZSBpdAoKICAvKioqKioqLwogIC8vIG1vZGUgJiAyOiBtZXJnZSBhbGwgcHJvcGVydGllcyBvZiB2YWx1ZSBpbnRvIHRoZSBucwoKICAvKioqKioqLwogIC8vIG1vZGUgJiA0OiByZXR1cm4gdmFsdWUgd2hlbiBhbHJlYWR5IG5zIG9iamVjdAoKICAvKioqKioqLwogIC8vIG1vZGUgJiA4fDE6IGJlaGF2ZSBsaWtlIHJlcXVpcmUKCiAgLyoqKioqKi8KCgogIF9fd2VicGFja19yZXF1aXJlX18udCA9IGZ1bmN0aW9uICh2YWx1ZSwgbW9kZSkgewogICAgLyoqKioqKi8KICAgIGlmIChtb2RlICYgMSkgdmFsdWUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKHZhbHVlKTsKICAgIC8qKioqKiovCgogICAgaWYgKG1vZGUgJiA4KSByZXR1cm4gdmFsdWU7CiAgICAvKioqKioqLwoKICAgIGlmIChtb2RlICYgNCAmJiBfdHlwZW9mKHZhbHVlKSA9PT0gJ29iamVjdCcgJiYgdmFsdWUgJiYgdmFsdWUuX19lc01vZHVsZSkgcmV0dXJuIHZhbHVlOwogICAgLyoqKioqKi8KCiAgICB2YXIgbnMgPSBPYmplY3QuY3JlYXRlKG51bGwpOwogICAgLyoqKioqKi8KCiAgICBfX3dlYnBhY2tfcmVxdWlyZV9fLnIobnMpOwogICAgLyoqKioqKi8KCgogICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG5zLCAnZGVmYXVsdCcsIHsKICAgICAgZW51bWVyYWJsZTogdHJ1ZSwKICAgICAgdmFsdWU6IHZhbHVlCiAgICB9KTsKICAgIC8qKioqKiovCgogICAgaWYgKG1vZGUgJiAyICYmIHR5cGVvZiB2YWx1ZSAhPSAnc3RyaW5nJykgZm9yICh2YXIga2V5IGluIHZhbHVlKSB7CiAgICAgIF9fd2VicGFja19yZXF1aXJlX18uZChucywga2V5LCBmdW5jdGlvbiAoa2V5KSB7CiAgICAgICAgcmV0dXJuIHZhbHVlW2tleV07CiAgICAgIH0uYmluZChudWxsLCBrZXkpKTsKICAgIH0KICAgIC8qKioqKiovCgogICAgcmV0dXJuIG5zOwogICAgLyoqKioqKi8KICB9OwogIC8qKioqKiovCgogIC8qKioqKiovCiAgLy8gZ2V0RGVmYXVsdEV4cG9ydCBmdW5jdGlvbiBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIG5vbi1oYXJtb255IG1vZHVsZXMKCiAgLyoqKioqKi8KCgogIF9fd2VicGFja19yZXF1aXJlX18ubiA9IGZ1bmN0aW9uIChtb2R1bGUpIHsKICAgIC8qKioqKiovCiAgICB2YXIgZ2V0dGVyID0gbW9kdWxlICYmIG1vZHVsZS5fX2VzTW9kdWxlID8KICAgIC8qKioqKiovCiAgICBmdW5jdGlvbiBnZXREZWZhdWx0KCkgewogICAgICByZXR1cm4gbW9kdWxlWydkZWZhdWx0J107CiAgICB9IDoKICAgIC8qKioqKiovCiAgICBmdW5jdGlvbiBnZXRNb2R1bGVFeHBvcnRzKCkgewogICAgICByZXR1cm4gbW9kdWxlOwogICAgfTsKICAgIC8qKioqKiovCgogICAgX193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgJ2EnLCBnZXR0ZXIpOwogICAgLyoqKioqKi8KCgogICAgcmV0dXJuIGdldHRlcjsKICAgIC8qKioqKiovCiAgfTsKICAvKioqKioqLwoKICAvKioqKioqLwogIC8vIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbAoKICAvKioqKioqLwoKCiAgX193ZWJwYWNrX3JlcXVpcmVfXy5vID0gZnVuY3Rpb24gKG9iamVjdCwgcHJvcGVydHkpIHsKICAgIHJldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBwcm9wZXJ0eSk7CiAgfTsKICAvKioqKioqLwoKICAvKioqKioqLwogIC8vIF9fd2VicGFja19wdWJsaWNfcGF0aF9fCgogIC8qKioqKiovCgoKICBfX3dlYnBhY2tfcmVxdWlyZV9fLnAgPSAiL2Rpc3QvIjsKICAvKioqKioqLwoKICAvKioqKioqLwoKICAvKioqKioqLwogIC8vIExvYWQgZW50cnkgbW9kdWxlIGFuZCByZXR1cm4gZXhwb3J0cwoKICAvKioqKioqLwoKICByZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXyhfX3dlYnBhY2tfcmVxdWlyZV9fLnMgPSA3Nik7CiAgLyoqKioqKi8KfSgKLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi8KCi8qKioqKiovCnsKICAvKioqLwogIDA6CiAgLyoqKi8KICBmdW5jdGlvbiBfKG1vZHVsZSwgX193ZWJwYWNrX2V4cG9ydHNfXywgX193ZWJwYWNrX3JlcXVpcmVfXykgewogICAgInVzZSBzdHJpY3QiOwogICAgLyogaGFybW9ueSBleHBvcnQgKGJpbmRpbmcpICovCgogICAgX193ZWJwYWNrX3JlcXVpcmVfXy5kKF9fd2VicGFja19leHBvcnRzX18sICJhIiwgZnVuY3Rpb24gKCkgewogICAgICByZXR1cm4gbm9ybWFsaXplQ29tcG9uZW50OwogICAgfSk7CiAgICAvKiBnbG9iYWxzIF9fVlVFX1NTUl9DT05URVhUX18gKi8KICAgIC8vIElNUE9SVEFOVDogRG8gTk9UIHVzZSBFUzIwMTUgZmVhdHVyZXMgaW4gdGhpcyBmaWxlIChleGNlcHQgZm9yIG1vZHVsZXMpLgogICAgLy8gVGhpcyBtb2R1bGUgaXMgYSBydW50aW1lIHV0aWxpdHkgZm9yIGNsZWFuZXIgY29tcG9uZW50IG1vZHVsZSBvdXRwdXQgYW5kIHdpbGwKICAgIC8vIGJlIGluY2x1ZGVkIGluIHRoZSBmaW5hbCB3ZWJwYWNrIHVzZXIgYnVuZGxlLgoKCiAgICBmdW5jdGlvbiBub3JtYWxpemVDb21wb25lbnQoc2NyaXB0RXhwb3J0cywgcmVuZGVyLCBzdGF0aWNSZW5kZXJGbnMsIGZ1bmN0aW9uYWxUZW1wbGF0ZSwgaW5qZWN0U3R5bGVzLCBzY29wZUlkLCBtb2R1bGVJZGVudGlmaWVyLAogICAgLyogc2VydmVyIG9ubHkgKi8KICAgIHNoYWRvd01vZGUKICAgIC8qIHZ1ZS1jbGkgb25seSAqLwogICAgKSB7CiAgICAgIC8vIFZ1ZS5leHRlbmQgY29uc3RydWN0b3IgZXhwb3J0IGludGVyb3AKICAgICAgdmFyIG9wdGlvbnMgPSB0eXBlb2Ygc2NyaXB0RXhwb3J0cyA9PT0gJ2Z1bmN0aW9uJyA/IHNjcmlwdEV4cG9ydHMub3B0aW9ucyA6IHNjcmlwdEV4cG9ydHM7IC8vIHJlbmRlciBmdW5jdGlvbnMKCiAgICAgIGlmIChyZW5kZXIpIHsKICAgICAgICBvcHRpb25zLnJlbmRlciA9IHJlbmRlcjsKICAgICAgICBvcHRpb25zLnN0YXRpY1JlbmRlckZucyA9IHN0YXRpY1JlbmRlckZuczsKICAgICAgICBvcHRpb25zLl9jb21waWxlZCA9IHRydWU7CiAgICAgIH0gLy8gZnVuY3Rpb25hbCB0ZW1wbGF0ZQoKCiAgICAgIGlmIChmdW5jdGlvbmFsVGVtcGxhdGUpIHsKICAgICAgICBvcHRpb25zLmZ1bmN0aW9uYWwgPSB0cnVlOwogICAgICB9IC8vIHNjb3BlZElkCgoKICAgICAgaWYgKHNjb3BlSWQpIHsKICAgICAgICBvcHRpb25zLl9zY29wZUlkID0gJ2RhdGEtdi0nICsgc2NvcGVJZDsKICAgICAgfQoKICAgICAgdmFyIGhvb2s7CgogICAgICBpZiAobW9kdWxlSWRlbnRpZmllcikgewogICAgICAgIC8vIHNlcnZlciBidWlsZAogICAgICAgIGhvb2sgPSBmdW5jdGlvbiBob29rKGNvbnRleHQpIHsKICAgICAgICAgIC8vIDIuMyBpbmplY3Rpb24KICAgICAgICAgIGNvbnRleHQgPSBjb250ZXh0IHx8IC8vIGNhY2hlZCBjYWxsCiAgICAgICAgICB0aGlzLiR2bm9kZSAmJiB0aGlzLiR2bm9kZS5zc3JDb250ZXh0IHx8IC8vIHN0YXRlZnVsCiAgICAgICAgICB0aGlzLnBhcmVudCAmJiB0aGlzLnBhcmVudC4kdm5vZGUgJiYgdGhpcy5wYXJlbnQuJHZub2RlLnNzckNvbnRleHQ7IC8vIGZ1bmN0aW9uYWwKICAgICAgICAgIC8vIDIuMiB3aXRoIHJ1bkluTmV3Q29udGV4dDogdHJ1ZQoKICAgICAgICAgIGlmICghY29udGV4dCAmJiB0eXBlb2YgX19WVUVfU1NSX0NPTlRFWFRfXyAhPT0gJ3VuZGVmaW5lZCcpIHsKICAgICAgICAgICAgY29udGV4dCA9IF9fVlVFX1NTUl9DT05URVhUX187CiAgICAgICAgICB9IC8vIGluamVjdCBjb21wb25lbnQgc3R5bGVzCgoKICAgICAgICAgIGlmIChpbmplY3RTdHlsZXMpIHsKICAgICAgICAgICAgaW5qZWN0U3R5bGVzLmNhbGwodGhpcywgY29udGV4dCk7CiAgICAgICAgICB9IC8vIHJlZ2lzdGVyIGNvbXBvbmVudCBtb2R1bGUgaWRlbnRpZmllciBmb3IgYXN5bmMgY2h1bmsgaW5mZXJyZW5jZQoKCiAgICAgICAgICBpZiAoY29udGV4dCAmJiBjb250ZXh0Ll9yZWdpc3RlcmVkQ29tcG9uZW50cykgewogICAgICAgICAgICBjb250ZXh0Ll9yZWdpc3RlcmVkQ29tcG9uZW50cy5hZGQobW9kdWxlSWRlbnRpZmllcik7CiAgICAgICAgICB9CiAgICAgICAgfTsgLy8gdXNlZCBieSBzc3IgaW4gY2FzZSBjb21wb25lbnQgaXMgY2FjaGVkIGFuZCBiZWZvcmVDcmVhdGUKICAgICAgICAvLyBuZXZlciBnZXRzIGNhbGxlZAoKCiAgICAgICAgb3B0aW9ucy5fc3NyUmVnaXN0ZXIgPSBob29rOwogICAgICB9IGVsc2UgaWYgKGluamVjdFN0eWxlcykgewogICAgICAgIGhvb2sgPSBzaGFkb3dNb2RlID8gZnVuY3Rpb24gKCkgewogICAgICAgICAgaW5qZWN0U3R5bGVzLmNhbGwodGhpcywgdGhpcy4kcm9vdC4kb3B0aW9ucy5zaGFkb3dSb290KTsKICAgICAgICB9IDogaW5qZWN0U3R5bGVzOwogICAgICB9CgogICAgICBpZiAoaG9vaykgewogICAgICAgIGlmIChvcHRpb25zLmZ1bmN0aW9uYWwpIHsKICAgICAgICAgIC8vIGZvciB0ZW1wbGF0ZS1vbmx5IGhvdC1yZWxvYWQgYmVjYXVzZSBpbiB0aGF0IGNhc2UgdGhlIHJlbmRlciBmbiBkb2Vzbid0CiAgICAgICAgICAvLyBnbyB0aHJvdWdoIHRoZSBub3JtYWxpemVyCiAgICAgICAgICBvcHRpb25zLl9pbmplY3RTdHlsZXMgPSBob29rOyAvLyByZWdpc3RlciBmb3IgZnVuY3Rpb2FsIGNvbXBvbmVudCBpbiB2dWUgZmlsZQoKICAgICAgICAgIHZhciBvcmlnaW5hbFJlbmRlciA9IG9wdGlvbnMucmVuZGVyOwoKICAgICAgICAgIG9wdGlvbnMucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyV2l0aFN0eWxlSW5qZWN0aW9uKGgsIGNvbnRleHQpIHsKICAgICAgICAgICAgaG9vay5jYWxsKGNvbnRleHQpOwogICAgICAgICAgICByZXR1cm4gb3JpZ2luYWxSZW5kZXIoaCwgY29udGV4dCk7CiAgICAgICAgICB9OwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAvLyBpbmplY3QgY29tcG9uZW50IHJlZ2lzdHJhdGlvbiBhcyBiZWZvcmVDcmVhdGUgaG9vawogICAgICAgICAgdmFyIGV4aXN0aW5nID0gb3B0aW9ucy5iZWZvcmVDcmVhdGU7CiAgICAgICAgICBvcHRpb25zLmJlZm9yZUNyZWF0ZSA9IGV4aXN0aW5nID8gW10uY29uY2F0KGV4aXN0aW5nLCBob29rKSA6IFtob29rXTsKICAgICAgICB9CiAgICAgIH0KCiAgICAgIHJldHVybiB7CiAgICAgICAgZXhwb3J0czogc2NyaXB0RXhwb3J0cywKICAgICAgICBvcHRpb25zOiBvcHRpb25zCiAgICAgIH07CiAgICB9CiAgICAvKioqLwoKICB9LAoKICAvKioqLwogIDExOgogIC8qKiovCiAgZnVuY3Rpb24gXyhtb2R1bGUsIGV4cG9ydHMpIHsKICAgIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgiZWxlbWVudC11aS9saWIvbWl4aW5zL21pZ3JhdGluZyIpOwogICAgLyoqKi8KICB9LAoKICAvKioqLwogIDIxOgogIC8qKiovCiAgZnVuY3Rpb24gXyhtb2R1bGUsIGV4cG9ydHMpIHsKICAgIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgiZWxlbWVudC11aS9saWIvdXRpbHMvc2hhcmVkIik7CiAgICAvKioqLwogIH0sCgogIC8qKiovCiAgNDoKICAvKioqLwogIGZ1bmN0aW9uIF8obW9kdWxlLCBleHBvcnRzKSB7CiAgICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoImVsZW1lbnQtdWkvbGliL21peGlucy9lbWl0dGVyIik7CiAgICAvKioqLwogIH0sCgogIC8qKiovCiAgNzY6CiAgLyoqKi8KICBmdW5jdGlvbiBfKG1vZHVsZSwgX193ZWJwYWNrX2V4cG9ydHNfXywgX193ZWJwYWNrX3JlcXVpcmVfXykgewogICAgInVzZSBzdHJpY3QiOwoKICAgIF9fd2VicGFja19yZXF1aXJlX18ucihfX3dlYnBhY2tfZXhwb3J0c19fKTsgLy8gQ09OQ0FURU5BVEVEIE1PRFVMRTogLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvbG9hZGVycy90ZW1wbGF0ZUxvYWRlci5qcz8/dnVlLWxvYWRlci1vcHRpb25zIS4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliPz92dWUtbG9hZGVyLW9wdGlvbnMhLi9wYWNrYWdlcy9pbnB1dC9zcmMvaW5wdXQudnVlP3Z1ZSZ0eXBlPXRlbXBsYXRlJmlkPTM0M2RkNzc0JgoKCiAgICB2YXIgcmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkgewogICAgICB2YXIgX3ZtID0gdGhpczsKCiAgICAgIHZhciBfaCA9IF92bS4kY3JlYXRlRWxlbWVudDsKCiAgICAgIHZhciBfYyA9IF92bS5fc2VsZi5fYyB8fCBfaDsKCiAgICAgIHJldHVybiBfYygiZGl2IiwgewogICAgICAgIGNsYXNzOiBbX3ZtLnR5cGUgPT09ICJ0ZXh0YXJlYSIgPyAiZWwtdGV4dGFyZWEiIDogImVsLWlucHV0IiwgX3ZtLmlucHV0U2l6ZSA/ICJlbC1pbnB1dC0tIiArIF92bS5pbnB1dFNpemUgOiAiIiwgewogICAgICAgICAgImlzLWRpc2FibGVkIjogX3ZtLmlucHV0RGlzYWJsZWQsCiAgICAgICAgICAiaXMtZXhjZWVkIjogX3ZtLmlucHV0RXhjZWVkLAogICAgICAgICAgImVsLWlucHV0LWdyb3VwIjogX3ZtLiRzbG90cy5wcmVwZW5kIHx8IF92bS4kc2xvdHMuYXBwZW5kLAogICAgICAgICAgImVsLWlucHV0LWdyb3VwLS1hcHBlbmQiOiBfdm0uJHNsb3RzLmFwcGVuZCwKICAgICAgICAgICJlbC1pbnB1dC1ncm91cC0tcHJlcGVuZCI6IF92bS4kc2xvdHMucHJlcGVuZCwKICAgICAgICAgICJlbC1pbnB1dC0tcHJlZml4IjogX3ZtLiRzbG90cy5wcmVmaXggfHwgX3ZtLnByZWZpeEljb24sCiAgICAgICAgICAiZWwtaW5wdXQtLXN1ZmZpeCI6IF92bS4kc2xvdHMuc3VmZml4IHx8IF92bS5zdWZmaXhJY29uIHx8IF92bS5jbGVhcmFibGUgfHwgX3ZtLnNob3dQYXNzd29yZAogICAgICAgIH1dLAogICAgICAgIG9uOiB7CiAgICAgICAgICBtb3VzZWVudGVyOiBmdW5jdGlvbiBtb3VzZWVudGVyKCRldmVudCkgewogICAgICAgICAgICBfdm0uaG92ZXJpbmcgPSB0cnVlOwogICAgICAgICAgfSwKICAgICAgICAgIG1vdXNlbGVhdmU6IGZ1bmN0aW9uIG1vdXNlbGVhdmUoJGV2ZW50KSB7CiAgICAgICAgICAgIF92bS5ob3ZlcmluZyA9IGZhbHNlOwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgfSwgW192bS50eXBlICE9PSAidGV4dGFyZWEiID8gW192bS4kc2xvdHMucHJlcGVuZCA/IF9jKCJkaXYiLCB7CiAgICAgICAgc3RhdGljQ2xhc3M6ICJlbC1pbnB1dC1ncm91cF9fcHJlcGVuZCIKICAgICAgfSwgW192bS5fdCgicHJlcGVuZCIpXSwgMikgOiBfdm0uX2UoKSwgX3ZtLnR5cGUgIT09ICJ0ZXh0YXJlYSIgPyBfYygiaW5wdXQiLCBfdm0uX2IoewogICAgICAgIHJlZjogImlucHV0IiwKICAgICAgICBzdGF0aWNDbGFzczogImVsLWlucHV0X19pbm5lciIsCiAgICAgICAgYXR0cnM6IHsKICAgICAgICAgIHRhYmluZGV4OiBfdm0udGFiaW5kZXgsCiAgICAgICAgICB0eXBlOiBfdm0uc2hvd1Bhc3N3b3JkID8gX3ZtLnBhc3N3b3JkVmlzaWJsZSA/ICJ0ZXh0IiA6ICJwYXNzd29yZCIgOiBfdm0udHlwZSwKICAgICAgICAgIGRpc2FibGVkOiBfdm0uaW5wdXREaXNhYmxlZCwKICAgICAgICAgIHJlYWRvbmx5OiBfdm0ucmVhZG9ubHksCiAgICAgICAgICBhdXRvY29tcGxldGU6IF92bS5hdXRvQ29tcGxldGUgfHwgX3ZtLmF1dG9jb21wbGV0ZSwKICAgICAgICAgICJhcmlhLWxhYmVsIjogX3ZtLmxhYmVsCiAgICAgICAgfSwKICAgICAgICBvbjogewogICAgICAgICAgY29tcG9zaXRpb25zdGFydDogX3ZtLmhhbmRsZUNvbXBvc2l0aW9uU3RhcnQsCiAgICAgICAgICBjb21wb3NpdGlvbnVwZGF0ZTogX3ZtLmhhbmRsZUNvbXBvc2l0aW9uVXBkYXRlLAogICAgICAgICAgY29tcG9zaXRpb25lbmQ6IF92bS5oYW5kbGVDb21wb3NpdGlvbkVuZCwKICAgICAgICAgIGlucHV0OiBfdm0uaGFuZGxlSW5wdXQsCiAgICAgICAgICBmb2N1czogX3ZtLmhhbmRsZUZvY3VzLAogICAgICAgICAgYmx1cjogX3ZtLmhhbmRsZUJsdXIsCiAgICAgICAgICBjaGFuZ2U6IF92bS5oYW5kbGVDaGFuZ2UKICAgICAgICB9CiAgICAgIH0sICJpbnB1dCIsIF92bS4kYXR0cnMsIGZhbHNlKSkgOiBfdm0uX2UoKSwgX3ZtLiRzbG90cy5wcmVmaXggfHwgX3ZtLnByZWZpeEljb24gPyBfYygic3BhbiIsIHsKICAgICAgICBzdGF0aWNDbGFzczogImVsLWlucHV0X19wcmVmaXgiCiAgICAgIH0sIFtfdm0uX3QoInByZWZpeCIpLCBfdm0ucHJlZml4SWNvbiA/IF9jKCJpIiwgewogICAgICAgIHN0YXRpY0NsYXNzOiAiZWwtaW5wdXRfX2ljb24iLAogICAgICAgIGNsYXNzOiBfdm0ucHJlZml4SWNvbgogICAgICB9KSA6IF92bS5fZSgpXSwgMikgOiBfdm0uX2UoKSwgX3ZtLmdldFN1ZmZpeFZpc2libGUoKSA/IF9jKCJzcGFuIiwgewogICAgICAgIHN0YXRpY0NsYXNzOiAiZWwtaW5wdXRfX3N1ZmZpeCIKICAgICAgfSwgW19jKCJzcGFuIiwgewogICAgICAgIHN0YXRpY0NsYXNzOiAiZWwtaW5wdXRfX3N1ZmZpeC1pbm5lciIKICAgICAgfSwgWyFfdm0uc2hvd0NsZWFyIHx8ICFfdm0uc2hvd1B3ZFZpc2libGUgfHwgIV92bS5pc1dvcmRMaW1pdFZpc2libGUgPyBbX3ZtLl90KCJzdWZmaXgiKSwgX3ZtLnN1ZmZpeEljb24gPyBfYygiaSIsIHsKICAgICAgICBzdGF0aWNDbGFzczogImVsLWlucHV0X19pY29uIiwKICAgICAgICBjbGFzczogX3ZtLnN1ZmZpeEljb24KICAgICAgfSkgOiBfdm0uX2UoKV0gOiBfdm0uX2UoKSwgX3ZtLnNob3dDbGVhciA/IF9jKCJpIiwgewogICAgICAgIHN0YXRpY0NsYXNzOiAiZWwtaW5wdXRfX2ljb24gZWwtaWNvbi1jaXJjbGUtY2xvc2UgZWwtaW5wdXRfX2NsZWFyIiwKICAgICAgICBvbjogewogICAgICAgICAgbW91c2Vkb3duOiBmdW5jdGlvbiBtb3VzZWRvd24oJGV2ZW50KSB7CiAgICAgICAgICAgICRldmVudC5wcmV2ZW50RGVmYXVsdCgpOwogICAgICAgICAgfSwKICAgICAgICAgIGNsaWNrOiBfdm0uY2xlYXIKICAgICAgICB9CiAgICAgIH0pIDogX3ZtLl9lKCksIF92bS5zaG93UHdkVmlzaWJsZSA/IF9jKCJpIiwgewogICAgICAgIHN0YXRpY0NsYXNzOiAiZWwtaW5wdXRfX2ljb24gZWwtaWNvbi12aWV3IGVsLWlucHV0X19jbGVhciIsCiAgICAgICAgb246IHsKICAgICAgICAgIGNsaWNrOiBfdm0uaGFuZGxlUGFzc3dvcmRWaXNpYmxlCiAgICAgICAgfQogICAgICB9KSA6IF92bS5fZSgpLCBfdm0uaXNXb3JkTGltaXRWaXNpYmxlID8gX2MoInNwYW4iLCB7CiAgICAgICAgc3RhdGljQ2xhc3M6ICJlbC1pbnB1dF9fY291bnQiCiAgICAgIH0sIFtfYygic3BhbiIsIHsKICAgICAgICBzdGF0aWNDbGFzczogImVsLWlucHV0X19jb3VudC1pbm5lciIKICAgICAgfSwgW192bS5fdigiXG4gICAgICAgICAgICAiICsgX3ZtLl9zKF92bS50ZXh0TGVuZ3RoKSArICIvIiArIF92bS5fcyhfdm0udXBwZXJMaW1pdCkgKyAiXG4gICAgICAgICAgIildKV0pIDogX3ZtLl9lKCldLCAyKSwgX3ZtLnZhbGlkYXRlU3RhdGUgPyBfYygiaSIsIHsKICAgICAgICBzdGF0aWNDbGFzczogImVsLWlucHV0X19pY29uIiwKICAgICAgICBjbGFzczogWyJlbC1pbnB1dF9fdmFsaWRhdGVJY29uIiwgX3ZtLnZhbGlkYXRlSWNvbl0KICAgICAgfSkgOiBfdm0uX2UoKV0pIDogX3ZtLl9lKCksIF92bS4kc2xvdHMuYXBwZW5kID8gX2MoImRpdiIsIHsKICAgICAgICBzdGF0aWNDbGFzczogImVsLWlucHV0LWdyb3VwX19hcHBlbmQiCiAgICAgIH0sIFtfdm0uX3QoImFwcGVuZCIpXSwgMikgOiBfdm0uX2UoKV0gOiBfYygidGV4dGFyZWEiLCBfdm0uX2IoewogICAgICAgIHJlZjogInRleHRhcmVhIiwKICAgICAgICBzdGF0aWNDbGFzczogImVsLXRleHRhcmVhX19pbm5lciIsCiAgICAgICAgc3R5bGU6IF92bS50ZXh0YXJlYVN0eWxlLAogICAgICAgIGF0dHJzOiB7CiAgICAgICAgICB0YWJpbmRleDogX3ZtLnRhYmluZGV4LAogICAgICAgICAgZGlzYWJsZWQ6IF92bS5pbnB1dERpc2FibGVkLAogICAgICAgICAgcmVhZG9ubHk6IF92bS5yZWFkb25seSwKICAgICAgICAgIGF1dG9jb21wbGV0ZTogX3ZtLmF1dG9Db21wbGV0ZSB8fCBfdm0uYXV0b2NvbXBsZXRlLAogICAgICAgICAgImFyaWEtbGFiZWwiOiBfdm0ubGFiZWwKICAgICAgICB9LAogICAgICAgIG9uOiB7CiAgICAgICAgICBjb21wb3NpdGlvbnN0YXJ0OiBfdm0uaGFuZGxlQ29tcG9zaXRpb25TdGFydCwKICAgICAgICAgIGNvbXBvc2l0aW9udXBkYXRlOiBfdm0uaGFuZGxlQ29tcG9zaXRpb25VcGRhdGUsCiAgICAgICAgICBjb21wb3NpdGlvbmVuZDogX3ZtLmhhbmRsZUNvbXBvc2l0aW9uRW5kLAogICAgICAgICAgaW5wdXQ6IF92bS5oYW5kbGVJbnB1dCwKICAgICAgICAgIGZvY3VzOiBfdm0uaGFuZGxlRm9jdXMsCiAgICAgICAgICBibHVyOiBfdm0uaGFuZGxlQmx1ciwKICAgICAgICAgIGNoYW5nZTogX3ZtLmhhbmRsZUNoYW5nZQogICAgICAgIH0KICAgICAgfSwgInRleHRhcmVhIiwgX3ZtLiRhdHRycywgZmFsc2UpKSwgX3ZtLmlzV29yZExpbWl0VmlzaWJsZSAmJiBfdm0udHlwZSA9PT0gInRleHRhcmVhIiA/IF9jKCJzcGFuIiwgewogICAgICAgIHN0YXRpY0NsYXNzOiAiZWwtaW5wdXRfX2NvdW50IgogICAgICB9LCBbX3ZtLl92KF92bS5fcyhfdm0udGV4dExlbmd0aCkgKyAiLyIgKyBfdm0uX3MoX3ZtLnVwcGVyTGltaXQpKV0pIDogX3ZtLl9lKCldLCAyKTsKICAgIH07CgogICAgdmFyIHN0YXRpY1JlbmRlckZucyA9IFtdOwogICAgcmVuZGVyLl93aXRoU3RyaXBwZWQgPSB0cnVlOyAvLyBDT05DQVRFTkFURUQgTU9EVUxFOiAuL3BhY2thZ2VzL2lucHV0L3NyYy9pbnB1dC52dWU/dnVlJnR5cGU9dGVtcGxhdGUmaWQ9MzQzZGQ3NzQmCiAgICAvLyBFWFRFUk5BTCBNT0RVTEU6IGV4dGVybmFsICJlbGVtZW50LXVpL2xpYi9taXhpbnMvZW1pdHRlciIKCiAgICB2YXIgZW1pdHRlcl8gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDQpOwoKICAgIHZhciBlbWl0dGVyX2RlZmF1bHQgPSAvKiNfX1BVUkVfXyovX193ZWJwYWNrX3JlcXVpcmVfXy5uKGVtaXR0ZXJfKTsgLy8gRVhURVJOQUwgTU9EVUxFOiBleHRlcm5hbCAiZWxlbWVudC11aS9saWIvbWl4aW5zL21pZ3JhdGluZyIKCgogICAgdmFyIG1pZ3JhdGluZ18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDExKTsKCiAgICB2YXIgbWlncmF0aW5nX2RlZmF1bHQgPSAvKiNfX1BVUkVfXyovX193ZWJwYWNrX3JlcXVpcmVfXy5uKG1pZ3JhdGluZ18pOyAvLyBDT05DQVRFTkFURUQgTU9EVUxFOiAuL3BhY2thZ2VzL2lucHV0L3NyYy9jYWxjVGV4dGFyZWFIZWlnaHQuanMKCgogICAgdmFyIGhpZGRlblRleHRhcmVhID0gdm9pZCAwOwogICAgdmFyIEhJRERFTl9TVFlMRSA9ICdcbiAgaGVpZ2h0OjAgIWltcG9ydGFudDtcbiAgdmlzaWJpbGl0eTpoaWRkZW4gIWltcG9ydGFudDtcbiAgb3ZlcmZsb3c6aGlkZGVuICFpbXBvcnRhbnQ7XG4gIHBvc2l0aW9uOmFic29sdXRlICFpbXBvcnRhbnQ7XG4gIHotaW5kZXg6LTEwMDAgIWltcG9ydGFudDtcbiAgdG9wOjAgIWltcG9ydGFudDtcbiAgcmlnaHQ6MCAhaW1wb3J0YW50XG4nOwogICAgdmFyIENPTlRFWFRfU1RZTEUgPSBbJ2xldHRlci1zcGFjaW5nJywgJ2xpbmUtaGVpZ2h0JywgJ3BhZGRpbmctdG9wJywgJ3BhZGRpbmctYm90dG9tJywgJ2ZvbnQtZmFtaWx5JywgJ2ZvbnQtd2VpZ2h0JywgJ2ZvbnQtc2l6ZScsICd0ZXh0LXJlbmRlcmluZycsICd0ZXh0LXRyYW5zZm9ybScsICd3aWR0aCcsICd0ZXh0LWluZGVudCcsICdwYWRkaW5nLWxlZnQnLCAncGFkZGluZy1yaWdodCcsICdib3JkZXItd2lkdGgnLCAnYm94LXNpemluZyddOwoKICAgIGZ1bmN0aW9uIGNhbGN1bGF0ZU5vZGVTdHlsaW5nKHRhcmdldEVsZW1lbnQpIHsKICAgICAgdmFyIHN0eWxlID0gd2luZG93LmdldENvbXB1dGVkU3R5bGUodGFyZ2V0RWxlbWVudCk7CiAgICAgIHZhciBib3hTaXppbmcgPSBzdHlsZS5nZXRQcm9wZXJ0eVZhbHVlKCdib3gtc2l6aW5nJyk7CiAgICAgIHZhciBwYWRkaW5nU2l6ZSA9IHBhcnNlRmxvYXQoc3R5bGUuZ2V0UHJvcGVydHlWYWx1ZSgncGFkZGluZy1ib3R0b20nKSkgKyBwYXJzZUZsb2F0KHN0eWxlLmdldFByb3BlcnR5VmFsdWUoJ3BhZGRpbmctdG9wJykpOwogICAgICB2YXIgYm9yZGVyU2l6ZSA9IHBhcnNlRmxvYXQoc3R5bGUuZ2V0UHJvcGVydHlWYWx1ZSgnYm9yZGVyLWJvdHRvbS13aWR0aCcpKSArIHBhcnNlRmxvYXQoc3R5bGUuZ2V0UHJvcGVydHlWYWx1ZSgnYm9yZGVyLXRvcC13aWR0aCcpKTsKICAgICAgdmFyIGNvbnRleHRTdHlsZSA9IENPTlRFWFRfU1RZTEUubWFwKGZ1bmN0aW9uIChuYW1lKSB7CiAgICAgICAgcmV0dXJuIG5hbWUgKyAnOicgKyBzdHlsZS5nZXRQcm9wZXJ0eVZhbHVlKG5hbWUpOwogICAgICB9KS5qb2luKCc7Jyk7CiAgICAgIHJldHVybiB7CiAgICAgICAgY29udGV4dFN0eWxlOiBjb250ZXh0U3R5bGUsCiAgICAgICAgcGFkZGluZ1NpemU6IHBhZGRpbmdTaXplLAogICAgICAgIGJvcmRlclNpemU6IGJvcmRlclNpemUsCiAgICAgICAgYm94U2l6aW5nOiBib3hTaXppbmcKICAgICAgfTsKICAgIH0KCiAgICBmdW5jdGlvbiBjYWxjVGV4dGFyZWFIZWlnaHQodGFyZ2V0RWxlbWVudCkgewogICAgICB2YXIgbWluUm93cyA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogMTsKICAgICAgdmFyIG1heFJvd3MgPSBhcmd1bWVudHMubGVuZ3RoID4gMiAmJiBhcmd1bWVudHNbMl0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1syXSA6IG51bGw7CgogICAgICBpZiAoIWhpZGRlblRleHRhcmVhKSB7CiAgICAgICAgaGlkZGVuVGV4dGFyZWEgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCd0ZXh0YXJlYScpOwogICAgICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQoaGlkZGVuVGV4dGFyZWEpOwogICAgICB9CgogICAgICB2YXIgX2NhbGN1bGF0ZU5vZGVTdHlsaW5nID0gY2FsY3VsYXRlTm9kZVN0eWxpbmcodGFyZ2V0RWxlbWVudCksCiAgICAgICAgICBwYWRkaW5nU2l6ZSA9IF9jYWxjdWxhdGVOb2RlU3R5bGluZy5wYWRkaW5nU2l6ZSwKICAgICAgICAgIGJvcmRlclNpemUgPSBfY2FsY3VsYXRlTm9kZVN0eWxpbmcuYm9yZGVyU2l6ZSwKICAgICAgICAgIGJveFNpemluZyA9IF9jYWxjdWxhdGVOb2RlU3R5bGluZy5ib3hTaXppbmcsCiAgICAgICAgICBjb250ZXh0U3R5bGUgPSBfY2FsY3VsYXRlTm9kZVN0eWxpbmcuY29udGV4dFN0eWxlOwoKICAgICAgaGlkZGVuVGV4dGFyZWEuc2V0QXR0cmlidXRlKCdzdHlsZScsIGNvbnRleHRTdHlsZSArICc7JyArIEhJRERFTl9TVFlMRSk7CiAgICAgIGhpZGRlblRleHRhcmVhLnZhbHVlID0gdGFyZ2V0RWxlbWVudC52YWx1ZSB8fCB0YXJnZXRFbGVtZW50LnBsYWNlaG9sZGVyIHx8ICcnOwogICAgICB2YXIgaGVpZ2h0ID0gaGlkZGVuVGV4dGFyZWEuc2Nyb2xsSGVpZ2h0OwogICAgICB2YXIgcmVzdWx0ID0ge307CgogICAgICBpZiAoYm94U2l6aW5nID09PSAnYm9yZGVyLWJveCcpIHsKICAgICAgICBoZWlnaHQgPSBoZWlnaHQgKyBib3JkZXJTaXplOwogICAgICB9IGVsc2UgaWYgKGJveFNpemluZyA9PT0gJ2NvbnRlbnQtYm94JykgewogICAgICAgIGhlaWdodCA9IGhlaWdodCAtIHBhZGRpbmdTaXplOwogICAgICB9CgogICAgICBoaWRkZW5UZXh0YXJlYS52YWx1ZSA9ICcnOwogICAgICB2YXIgc2luZ2xlUm93SGVpZ2h0ID0gaGlkZGVuVGV4dGFyZWEuc2Nyb2xsSGVpZ2h0IC0gcGFkZGluZ1NpemU7CgogICAgICBpZiAobWluUm93cyAhPT0gbnVsbCkgewogICAgICAgIHZhciBtaW5IZWlnaHQgPSBzaW5nbGVSb3dIZWlnaHQgKiBtaW5Sb3dzOwoKICAgICAgICBpZiAoYm94U2l6aW5nID09PSAnYm9yZGVyLWJveCcpIHsKICAgICAgICAgIG1pbkhlaWdodCA9IG1pbkhlaWdodCArIHBhZGRpbmdTaXplICsgYm9yZGVyU2l6ZTsKICAgICAgICB9CgogICAgICAgIGhlaWdodCA9IE1hdGgubWF4KG1pbkhlaWdodCwgaGVpZ2h0KTsKICAgICAgICByZXN1bHQubWluSGVpZ2h0ID0gbWluSGVpZ2h0ICsgJ3B4JzsKICAgICAgfQoKICAgICAgaWYgKG1heFJvd3MgIT09IG51bGwpIHsKICAgICAgICB2YXIgbWF4SGVpZ2h0ID0gc2luZ2xlUm93SGVpZ2h0ICogbWF4Um93czsKCiAgICAgICAgaWYgKGJveFNpemluZyA9PT0gJ2JvcmRlci1ib3gnKSB7CiAgICAgICAgICBtYXhIZWlnaHQgPSBtYXhIZWlnaHQgKyBwYWRkaW5nU2l6ZSArIGJvcmRlclNpemU7CiAgICAgICAgfQoKICAgICAgICBoZWlnaHQgPSBNYXRoLm1pbihtYXhIZWlnaHQsIGhlaWdodCk7CiAgICAgIH0KCiAgICAgIHJlc3VsdC5oZWlnaHQgPSBoZWlnaHQgKyAncHgnOwogICAgICBoaWRkZW5UZXh0YXJlYS5wYXJlbnROb2RlICYmIGhpZGRlblRleHRhcmVhLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoaGlkZGVuVGV4dGFyZWEpOwogICAgICBoaWRkZW5UZXh0YXJlYSA9IG51bGw7CiAgICAgIHJldHVybiByZXN1bHQ7CiAgICB9CgogICAgOyAvLyBFWFRFUk5BTCBNT0RVTEU6IGV4dGVybmFsICJlbGVtZW50LXVpL2xpYi91dGlscy9tZXJnZSIKCiAgICB2YXIgbWVyZ2VfID0gX193ZWJwYWNrX3JlcXVpcmVfXyg5KTsKCiAgICB2YXIgbWVyZ2VfZGVmYXVsdCA9IC8qI19fUFVSRV9fKi9fX3dlYnBhY2tfcmVxdWlyZV9fLm4obWVyZ2VfKTsgLy8gRVhURVJOQUwgTU9EVUxFOiBleHRlcm5hbCAiZWxlbWVudC11aS9saWIvdXRpbHMvc2hhcmVkIgoKCiAgICB2YXIgc2hhcmVkXyA9IF9fd2VicGFja19yZXF1aXJlX18oMjEpOyAvLyBDT05DQVRFTkFURUQgTU9EVUxFOiAuL25vZGVfbW9kdWxlcy9iYWJlbC1sb2FkZXIvbGliIS4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliPz92dWUtbG9hZGVyLW9wdGlvbnMhLi9wYWNrYWdlcy9pbnB1dC9zcmMvaW5wdXQudnVlP3Z1ZSZ0eXBlPXNjcmlwdCZsYW5nPWpzJgogICAgLy8KICAgIC8vCiAgICAvLwogICAgLy8KICAgIC8vCiAgICAvLwogICAgLy8KICAgIC8vCiAgICAvLwogICAgLy8KICAgIC8vCiAgICAvLwogICAgLy8KICAgIC8vCiAgICAvLwogICAgLy8KICAgIC8vCiAgICAvLwogICAgLy8KICAgIC8vCiAgICAvLwogICAgLy8KICAgIC8vCiAgICAvLwogICAgLy8KICAgIC8vCiAgICAvLwogICAgLy8KICAgIC8vCiAgICAvLwogICAgLy8KICAgIC8vCiAgICAvLwogICAgLy8KICAgIC8vCiAgICAvLwogICAgLy8KICAgIC8vCiAgICAvLwogICAgLy8KICAgIC8vCiAgICAvLwogICAgLy8KICAgIC8vCiAgICAvLwogICAgLy8KICAgIC8vCiAgICAvLwogICAgLy8KICAgIC8vCiAgICAvLwogICAgLy8KICAgIC8vCiAgICAvLwogICAgLy8KICAgIC8vCiAgICAvLwogICAgLy8KICAgIC8vCiAgICAvLwogICAgLy8KICAgIC8vCiAgICAvLwogICAgLy8KICAgIC8vCiAgICAvLwogICAgLy8KICAgIC8vCiAgICAvLwogICAgLy8KICAgIC8vCiAgICAvLwogICAgLy8KICAgIC8vCiAgICAvLwogICAgLy8KICAgIC8vCiAgICAvLwogICAgLy8KICAgIC8vCiAgICAvLwogICAgLy8KICAgIC8vCiAgICAvLwogICAgLy8KICAgIC8vCiAgICAvLwogICAgLy8KICAgIC8vCiAgICAvLwogICAgLy8KICAgIC8vCiAgICAvLwogICAgLy8KICAgIC8vCiAgICAvLwogICAgLy8KICAgIC8vCiAgICAvLwogICAgLy8KICAgIC8vCiAgICAvLwogICAgLy8KICAgIC8vCiAgICAvLwogICAgLy8KICAgIC8vCiAgICAvLwogICAgLy8KCiAgICAvKiBoYXJtb255IGRlZmF1bHQgZXhwb3J0ICovCgoKICAgIHZhciBpbnB1dHZ1ZV90eXBlX3NjcmlwdF9sYW5nX2pzXyA9IHsKICAgICAgbmFtZTogJ0VsSW5wdXQnLAogICAgICBjb21wb25lbnROYW1lOiAnRWxJbnB1dCcsCiAgICAgIG1peGluczogW2VtaXR0ZXJfZGVmYXVsdC5hLCBtaWdyYXRpbmdfZGVmYXVsdC5hXSwKICAgICAgaW5oZXJpdEF0dHJzOiBmYWxzZSwKICAgICAgaW5qZWN0OiB7CiAgICAgICAgZWxGb3JtOiB7CiAgICAgICAgICBkZWZhdWx0OiAnJwogICAgICAgIH0sCiAgICAgICAgZWxGb3JtSXRlbTogewogICAgICAgICAgZGVmYXVsdDogJycKICAgICAgICB9CiAgICAgIH0sCiAgICAgIGRhdGE6IGZ1bmN0aW9uIGRhdGEoKSB7CiAgICAgICAgcmV0dXJuIHsKICAgICAgICAgIHRleHRhcmVhQ2FsY1N0eWxlOiB7fSwKICAgICAgICAgIGhvdmVyaW5nOiBmYWxzZSwKICAgICAgICAgIGZvY3VzZWQ6IGZhbHNlLAogICAgICAgICAgaXNDb21wb3Npbmc6IGZhbHNlLAogICAgICAgICAgcGFzc3dvcmRWaXNpYmxlOiBmYWxzZQogICAgICAgIH07CiAgICAgIH0sCiAgICAgIHByb3BzOiB7CiAgICAgICAgdmFsdWU6IFtTdHJpbmcsIE51bWJlcl0sCiAgICAgICAgc2l6ZTogU3RyaW5nLAogICAgICAgIHJlc2l6ZTogU3RyaW5nLAogICAgICAgIGZvcm06IFN0cmluZywKICAgICAgICBkaXNhYmxlZDogQm9vbGVhbiwKICAgICAgICByZWFkb25seTogQm9vbGVhbiwKICAgICAgICB0eXBlOiB7CiAgICAgICAgICB0eXBlOiBTdHJpbmcsCiAgICAgICAgICBkZWZhdWx0OiAndGV4dCcKICAgICAgICB9LAogICAgICAgIGF1dG9zaXplOiB7CiAgICAgICAgICB0eXBlOiBbQm9vbGVhbiwgT2JqZWN0XSwKICAgICAgICAgIGRlZmF1bHQ6IGZhbHNlCiAgICAgICAgfSwKICAgICAgICBhdXRvY29tcGxldGU6IHsKICAgICAgICAgIHR5cGU6IFN0cmluZywKICAgICAgICAgIGRlZmF1bHQ6ICdvZmYnCiAgICAgICAgfSwKCiAgICAgICAgLyoqIEBEZXByZWNhdGVkIGluIG5leHQgbWFqb3IgdmVyc2lvbiAqLwogICAgICAgIGF1dG9Db21wbGV0ZTogewogICAgICAgICAgdHlwZTogU3RyaW5nLAogICAgICAgICAgdmFsaWRhdG9yOiBmdW5jdGlvbiB2YWxpZGF0b3IodmFsKSB7CiAgICAgICAgICAgIGZhbHNlICYmIGZhbHNlOwogICAgICAgICAgICByZXR1cm4gdHJ1ZTsKICAgICAgICAgIH0KICAgICAgICB9LAogICAgICAgIHZhbGlkYXRlRXZlbnQ6IHsKICAgICAgICAgIHR5cGU6IEJvb2xlYW4sCiAgICAgICAgICBkZWZhdWx0OiB0cnVlCiAgICAgICAgfSwKICAgICAgICBzdWZmaXhJY29uOiBTdHJpbmcsCiAgICAgICAgcHJlZml4SWNvbjogU3RyaW5nLAogICAgICAgIGxhYmVsOiBTdHJpbmcsCiAgICAgICAgY2xlYXJhYmxlOiB7CiAgICAgICAgICB0eXBlOiBCb29sZWFuLAogICAgICAgICAgZGVmYXVsdDogZmFsc2UKICAgICAgICB9LAogICAgICAgIHNob3dQYXNzd29yZDogewogICAgICAgICAgdHlwZTogQm9vbGVhbiwKICAgICAgICAgIGRlZmF1bHQ6IGZhbHNlCiAgICAgICAgfSwKICAgICAgICBzaG93V29yZExpbWl0OiB7CiAgICAgICAgICB0eXBlOiBCb29sZWFuLAogICAgICAgICAgZGVmYXVsdDogZmFsc2UKICAgICAgICB9LAogICAgICAgIHRhYmluZGV4OiBTdHJpbmcKICAgICAgfSwKICAgICAgY29tcHV0ZWQ6IHsKICAgICAgICBfZWxGb3JtSXRlbVNpemU6IGZ1bmN0aW9uIF9lbEZvcm1JdGVtU2l6ZSgpIHsKICAgICAgICAgIHJldHVybiAodGhpcy5lbEZvcm1JdGVtIHx8IHt9KS5lbEZvcm1JdGVtU2l6ZTsKICAgICAgICB9LAogICAgICAgIHZhbGlkYXRlU3RhdGU6IGZ1bmN0aW9uIHZhbGlkYXRlU3RhdGUoKSB7CiAgICAgICAgICByZXR1cm4gdGhpcy5lbEZvcm1JdGVtID8gdGhpcy5lbEZvcm1JdGVtLnZhbGlkYXRlU3RhdGUgOiAnJzsKICAgICAgICB9LAogICAgICAgIG5lZWRTdGF0dXNJY29uOiBmdW5jdGlvbiBuZWVkU3RhdHVzSWNvbigpIHsKICAgICAgICAgIHJldHVybiB0aGlzLmVsRm9ybSA/IHRoaXMuZWxGb3JtLnN0YXR1c0ljb24gOiBmYWxzZTsKICAgICAgICB9LAogICAgICAgIHZhbGlkYXRlSWNvbjogZnVuY3Rpb24gdmFsaWRhdGVJY29uKCkgewogICAgICAgICAgcmV0dXJuIHsKICAgICAgICAgICAgdmFsaWRhdGluZzogJ2VsLWljb24tbG9hZGluZycsCiAgICAgICAgICAgIHN1Y2Nlc3M6ICdlbC1pY29uLWNpcmNsZS1jaGVjaycsCiAgICAgICAgICAgIGVycm9yOiAnZWwtaWNvbi1jaXJjbGUtY2xvc2UnCiAgICAgICAgICB9W3RoaXMudmFsaWRhdGVTdGF0ZV07CiAgICAgICAgfSwKICAgICAgICB0ZXh0YXJlYVN0eWxlOiBmdW5jdGlvbiB0ZXh0YXJlYVN0eWxlKCkgewogICAgICAgICAgcmV0dXJuIG1lcmdlX2RlZmF1bHQoKSh7fSwgdGhpcy50ZXh0YXJlYUNhbGNTdHlsZSwgewogICAgICAgICAgICByZXNpemU6IHRoaXMucmVzaXplCiAgICAgICAgICB9KTsKICAgICAgICB9LAogICAgICAgIGlucHV0U2l6ZTogZnVuY3Rpb24gaW5wdXRTaXplKCkgewogICAgICAgICAgcmV0dXJuIHRoaXMuc2l6ZSB8fCB0aGlzLl9lbEZvcm1JdGVtU2l6ZSB8fCAodGhpcy4kRUxFTUVOVCB8fCB7fSkuc2l6ZTsKICAgICAgICB9LAogICAgICAgIGlucHV0RGlzYWJsZWQ6IGZ1bmN0aW9uIGlucHV0RGlzYWJsZWQoKSB7CiAgICAgICAgICByZXR1cm4gdGhpcy5kaXNhYmxlZCB8fCAodGhpcy5lbEZvcm0gfHwge30pLmRpc2FibGVkOwogICAgICAgIH0sCiAgICAgICAgbmF0aXZlSW5wdXRWYWx1ZTogZnVuY3Rpb24gbmF0aXZlSW5wdXRWYWx1ZSgpIHsKICAgICAgICAgIHJldHVybiB0aGlzLnZhbHVlID09PSBudWxsIHx8IHRoaXMudmFsdWUgPT09IHVuZGVmaW5lZCA/ICcnIDogU3RyaW5nKHRoaXMudmFsdWUpOwogICAgICAgIH0sCiAgICAgICAgc2hvd0NsZWFyOiBmdW5jdGlvbiBzaG93Q2xlYXIoKSB7CiAgICAgICAgICByZXR1cm4gdGhpcy5jbGVhcmFibGUgJiYgIXRoaXMuaW5wdXREaXNhYmxlZCAmJiAhdGhpcy5yZWFkb25seSAmJiB0aGlzLm5hdGl2ZUlucHV0VmFsdWUgJiYgKHRoaXMuZm9jdXNlZCB8fCB0aGlzLmhvdmVyaW5nKTsKICAgICAgICB9LAogICAgICAgIHNob3dQd2RWaXNpYmxlOiBmdW5jdGlvbiBzaG93UHdkVmlzaWJsZSgpIHsKICAgICAgICAgIHJldHVybiB0aGlzLnNob3dQYXNzd29yZCAmJiAhdGhpcy5pbnB1dERpc2FibGVkICYmICF0aGlzLnJlYWRvbmx5ICYmICghIXRoaXMubmF0aXZlSW5wdXRWYWx1ZSB8fCB0aGlzLmZvY3VzZWQpOwogICAgICAgIH0sCiAgICAgICAgaXNXb3JkTGltaXRWaXNpYmxlOiBmdW5jdGlvbiBpc1dvcmRMaW1pdFZpc2libGUoKSB7CiAgICAgICAgICByZXR1cm4gdGhpcy5zaG93V29yZExpbWl0ICYmIHRoaXMuJGF0dHJzLm1heGxlbmd0aCAmJiAodGhpcy50eXBlID09PSAndGV4dCcgfHwgdGhpcy50eXBlID09PSAndGV4dGFyZWEnKSAmJiAhdGhpcy5pbnB1dERpc2FibGVkICYmICF0aGlzLnJlYWRvbmx5ICYmICF0aGlzLnNob3dQYXNzd29yZDsKICAgICAgICB9LAogICAgICAgIHVwcGVyTGltaXQ6IGZ1bmN0aW9uIHVwcGVyTGltaXQoKSB7CiAgICAgICAgICByZXR1cm4gdGhpcy4kYXR0cnMubWF4bGVuZ3RoOwogICAgICAgIH0sCiAgICAgICAgdGV4dExlbmd0aDogZnVuY3Rpb24gdGV4dExlbmd0aCgpIHsKICAgICAgICAgIGlmICh0eXBlb2YgdGhpcy52YWx1ZSA9PT0gJ251bWJlcicpIHsKICAgICAgICAgICAgcmV0dXJuIFN0cmluZyh0aGlzLnZhbHVlKS5sZW5ndGg7CiAgICAgICAgICB9CgogICAgICAgICAgcmV0dXJuICh0aGlzLnZhbHVlIHx8ICcnKS5sZW5ndGg7CiAgICAgICAgfSwKICAgICAgICBpbnB1dEV4Y2VlZDogZnVuY3Rpb24gaW5wdXRFeGNlZWQoKSB7CiAgICAgICAgICAvLyBzaG93IGV4Y2VlZCBzdHlsZSBpZiBsZW5ndGggb2YgaW5pdGlhbCB2YWx1ZSBncmVhdGVyIHRoZW4gbWF4bGVuZ3RoCiAgICAgICAgICByZXR1cm4gdGhpcy5pc1dvcmRMaW1pdFZpc2libGUgJiYgdGhpcy50ZXh0TGVuZ3RoID4gdGhpcy51cHBlckxpbWl0OwogICAgICAgIH0KICAgICAgfSwKICAgICAgd2F0Y2g6IHsKICAgICAgICB2YWx1ZTogZnVuY3Rpb24gdmFsdWUodmFsKSB7CiAgICAgICAgICB0aGlzLiRuZXh0VGljayh0aGlzLnJlc2l6ZVRleHRhcmVhKTsKCiAgICAgICAgICBpZiAodGhpcy52YWxpZGF0ZUV2ZW50KSB7CiAgICAgICAgICAgIHRoaXMuZGlzcGF0Y2goJ0VsRm9ybUl0ZW0nLCAnZWwuZm9ybS5jaGFuZ2UnLCBbdmFsXSk7CiAgICAgICAgICB9CiAgICAgICAgfSwKICAgICAgICAvLyBuYXRpdmUgaW5wdXQgdmFsdWUgaXMgc2V0IGV4cGxpY2l0bHkKICAgICAgICAvLyBkbyBub3QgdXNlIHYtbW9kZWwgLyA6dmFsdWUgaW4gdGVtcGxhdGUKICAgICAgICAvLyBzZWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9FbGVtZUZFL2VsZW1lbnQvaXNzdWVzLzE0NTIxCiAgICAgICAgbmF0aXZlSW5wdXRWYWx1ZTogZnVuY3Rpb24gbmF0aXZlSW5wdXRWYWx1ZSgpIHsKICAgICAgICAgIHRoaXMuc2V0TmF0aXZlSW5wdXRWYWx1ZSgpOwogICAgICAgIH0sCiAgICAgICAgLy8gd2hlbiBjaGFuZ2UgYmV0d2VlbiA8aW5wdXQ+IGFuZCA8dGV4dGFyZWE+LAogICAgICAgIC8vIHVwZGF0ZSBET00gZGVwZW5kZW50IHZhbHVlIGFuZCBzdHlsZXMKICAgICAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vRWxlbWVGRS9lbGVtZW50L2lzc3Vlcy8xNDg1NwogICAgICAgIHR5cGU6IGZ1bmN0aW9uIHR5cGUoKSB7CiAgICAgICAgICB2YXIgX3RoaXMgPSB0aGlzOwoKICAgICAgICAgIHRoaXMuJG5leHRUaWNrKGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgX3RoaXMuc2V0TmF0aXZlSW5wdXRWYWx1ZSgpOwoKICAgICAgICAgICAgX3RoaXMucmVzaXplVGV4dGFyZWEoKTsKCiAgICAgICAgICAgIF90aGlzLnVwZGF0ZUljb25PZmZzZXQoKTsKICAgICAgICAgIH0pOwogICAgICAgIH0KICAgICAgfSwKICAgICAgbWV0aG9kczogewogICAgICAgIGZvY3VzOiBmdW5jdGlvbiBmb2N1cygpIHsKICAgICAgICAgIHRoaXMuZ2V0SW5wdXQoKS5mb2N1cygpOwogICAgICAgIH0sCiAgICAgICAgYmx1cjogZnVuY3Rpb24gYmx1cigpIHsKICAgICAgICAgIHRoaXMuZ2V0SW5wdXQoKS5ibHVyKCk7CiAgICAgICAgfSwKICAgICAgICBnZXRNaWdyYXRpbmdDb25maWc6IGZ1bmN0aW9uIGdldE1pZ3JhdGluZ0NvbmZpZygpIHsKICAgICAgICAgIHJldHVybiB7CiAgICAgICAgICAgIHByb3BzOiB7CiAgICAgICAgICAgICAgJ2ljb24nOiAnaWNvbiBpcyByZW1vdmVkLCB1c2Ugc3VmZml4LWljb24gLyBwcmVmaXgtaWNvbiBpbnN0ZWFkLicsCiAgICAgICAgICAgICAgJ29uLWljb24tY2xpY2snOiAnb24taWNvbi1jbGljayBpcyByZW1vdmVkLicKICAgICAgICAgICAgfSwKICAgICAgICAgICAgZXZlbnRzOiB7CiAgICAgICAgICAgICAgJ2NsaWNrJzogJ2NsaWNrIGlzIHJlbW92ZWQuJwogICAgICAgICAgICB9CiAgICAgICAgICB9OwogICAgICAgIH0sCiAgICAgICAgaGFuZGxlQmx1cjogZnVuY3Rpb24gaGFuZGxlQmx1cihldmVudCkgewogICAgICAgICAgdGhpcy5mb2N1c2VkID0gZmFsc2U7CiAgICAgICAgICB0aGlzLiRlbWl0KCdibHVyJywgZXZlbnQpOwoKICAgICAgICAgIGlmICh0aGlzLnZhbGlkYXRlRXZlbnQpIHsKICAgICAgICAgICAgdGhpcy5kaXNwYXRjaCgnRWxGb3JtSXRlbScsICdlbC5mb3JtLmJsdXInLCBbdGhpcy52YWx1ZV0pOwogICAgICAgICAgfQogICAgICAgIH0sCiAgICAgICAgc2VsZWN0OiBmdW5jdGlvbiBzZWxlY3QoKSB7CiAgICAgICAgICB0aGlzLmdldElucHV0KCkuc2VsZWN0KCk7CiAgICAgICAgfSwKICAgICAgICByZXNpemVUZXh0YXJlYTogZnVuY3Rpb24gcmVzaXplVGV4dGFyZWEoKSB7CiAgICAgICAgICBpZiAodGhpcy4kaXNTZXJ2ZXIpIHJldHVybjsKICAgICAgICAgIHZhciBhdXRvc2l6ZSA9IHRoaXMuYXV0b3NpemUsCiAgICAgICAgICAgICAgdHlwZSA9IHRoaXMudHlwZTsKICAgICAgICAgIGlmICh0eXBlICE9PSAndGV4dGFyZWEnKSByZXR1cm47CgogICAgICAgICAgaWYgKCFhdXRvc2l6ZSkgewogICAgICAgICAgICB0aGlzLnRleHRhcmVhQ2FsY1N0eWxlID0gewogICAgICAgICAgICAgIG1pbkhlaWdodDogY2FsY1RleHRhcmVhSGVpZ2h0KHRoaXMuJHJlZnMudGV4dGFyZWEpLm1pbkhlaWdodAogICAgICAgICAgICB9OwogICAgICAgICAgICByZXR1cm47CiAgICAgICAgICB9CgogICAgICAgICAgdmFyIG1pblJvd3MgPSBhdXRvc2l6ZS5taW5Sb3dzOwogICAgICAgICAgdmFyIG1heFJvd3MgPSBhdXRvc2l6ZS5tYXhSb3dzOwogICAgICAgICAgdGhpcy50ZXh0YXJlYUNhbGNTdHlsZSA9IGNhbGNUZXh0YXJlYUhlaWdodCh0aGlzLiRyZWZzLnRleHRhcmVhLCBtaW5Sb3dzLCBtYXhSb3dzKTsKICAgICAgICB9LAogICAgICAgIHNldE5hdGl2ZUlucHV0VmFsdWU6IGZ1bmN0aW9uIHNldE5hdGl2ZUlucHV0VmFsdWUoKSB7CiAgICAgICAgICB2YXIgaW5wdXQgPSB0aGlzLmdldElucHV0KCk7CiAgICAgICAgICBpZiAoIWlucHV0KSByZXR1cm47CiAgICAgICAgICBpZiAoaW5wdXQudmFsdWUgPT09IHRoaXMubmF0aXZlSW5wdXRWYWx1ZSkgcmV0dXJuOwogICAgICAgICAgaW5wdXQudmFsdWUgPSB0aGlzLm5hdGl2ZUlucHV0VmFsdWU7CiAgICAgICAgfSwKICAgICAgICBoYW5kbGVGb2N1czogZnVuY3Rpb24gaGFuZGxlRm9jdXMoZXZlbnQpIHsKICAgICAgICAgIHRoaXMuZm9jdXNlZCA9IHRydWU7CiAgICAgICAgICB0aGlzLiRlbWl0KCdmb2N1cycsIGV2ZW50KTsKICAgICAgICB9LAogICAgICAgIGhhbmRsZUNvbXBvc2l0aW9uU3RhcnQ6IGZ1bmN0aW9uIGhhbmRsZUNvbXBvc2l0aW9uU3RhcnQoKSB7CiAgICAgICAgICB0aGlzLmlzQ29tcG9zaW5nID0gdHJ1ZTsKICAgICAgICB9LAogICAgICAgIGhhbmRsZUNvbXBvc2l0aW9uVXBkYXRlOiBmdW5jdGlvbiBoYW5kbGVDb21wb3NpdGlvblVwZGF0ZShldmVudCkgewogICAgICAgICAgdmFyIHRleHQgPSBldmVudC50YXJnZXQudmFsdWU7CiAgICAgICAgICB2YXIgbGFzdENoYXJhY3RlciA9IHRleHRbdGV4dC5sZW5ndGggLSAxXSB8fCAnJzsKICAgICAgICAgIHRoaXMuaXNDb21wb3NpbmcgPSAhT2JqZWN0KHNoYXJlZF9bImlzS29yZWFuIl0pKGxhc3RDaGFyYWN0ZXIpOwogICAgICAgIH0sCiAgICAgICAgaGFuZGxlQ29tcG9zaXRpb25FbmQ6IGZ1bmN0aW9uIGhhbmRsZUNvbXBvc2l0aW9uRW5kKGV2ZW50KSB7CiAgICAgICAgICBpZiAodGhpcy5pc0NvbXBvc2luZykgewogICAgICAgICAgICB0aGlzLmlzQ29tcG9zaW5nID0gZmFsc2U7CiAgICAgICAgICAgIHRoaXMuaGFuZGxlSW5wdXQoZXZlbnQpOwogICAgICAgICAgfQogICAgICAgIH0sCiAgICAgICAgaGFuZGxlSW5wdXQ6IGZ1bmN0aW9uIGhhbmRsZUlucHV0KGV2ZW50KSB7CiAgICAgICAgICAvLyBzaG91bGQgbm90IGVtaXQgaW5wdXQgZHVyaW5nIGNvbXBvc2l0aW9uCiAgICAgICAgICAvLyBzZWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9FbGVtZUZFL2VsZW1lbnQvaXNzdWVzLzEwNTE2CiAgICAgICAgICBpZiAodGhpcy5pc0NvbXBvc2luZykgcmV0dXJuOyAvLyBoYWNrIGZvciBodHRwczovL2dpdGh1Yi5jb20vRWxlbWVGRS9lbGVtZW50L2lzc3Vlcy84NTQ4CiAgICAgICAgICAvLyBzaG91bGQgcmVtb3ZlIHRoZSBmb2xsb3dpbmcgbGluZSB3aGVuIHdlIGRvbid0IHN1cHBvcnQgSUUKCiAgICAgICAgICBpZiAoZXZlbnQudGFyZ2V0LnZhbHVlID09PSB0aGlzLm5hdGl2ZUlucHV0VmFsdWUpIHJldHVybjsKICAgICAgICAgIHRoaXMuJGVtaXQoJ2lucHV0JywgZXZlbnQudGFyZ2V0LnZhbHVlKTsgLy8gZW5zdXJlIG5hdGl2ZSBpbnB1dCB2YWx1ZSBpcyBjb250cm9sbGVkCiAgICAgICAgICAvLyBzZWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9FbGVtZUZFL2VsZW1lbnQvaXNzdWVzLzEyODUwCgogICAgICAgICAgdGhpcy4kbmV4dFRpY2sodGhpcy5zZXROYXRpdmVJbnB1dFZhbHVlKTsKICAgICAgICB9LAogICAgICAgIGhhbmRsZUNoYW5nZTogZnVuY3Rpb24gaGFuZGxlQ2hhbmdlKGV2ZW50KSB7CiAgICAgICAgICB0aGlzLiRlbWl0KCdjaGFuZ2UnLCBldmVudC50YXJnZXQudmFsdWUpOwogICAgICAgIH0sCiAgICAgICAgY2FsY0ljb25PZmZzZXQ6IGZ1bmN0aW9uIGNhbGNJY29uT2Zmc2V0KHBsYWNlKSB7CiAgICAgICAgICB2YXIgZWxMaXN0ID0gW10uc2xpY2UuY2FsbCh0aGlzLiRlbC5xdWVyeVNlbGVjdG9yQWxsKCcuZWwtaW5wdXRfXycgKyBwbGFjZSkgfHwgW10pOwogICAgICAgICAgaWYgKCFlbExpc3QubGVuZ3RoKSByZXR1cm47CiAgICAgICAgICB2YXIgZWwgPSBudWxsOwoKICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZWxMaXN0Lmxlbmd0aDsgaSsrKSB7CiAgICAgICAgICAgIGlmIChlbExpc3RbaV0ucGFyZW50Tm9kZSA9PT0gdGhpcy4kZWwpIHsKICAgICAgICAgICAgICBlbCA9IGVsTGlzdFtpXTsKICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgfQogICAgICAgICAgfQoKICAgICAgICAgIGlmICghZWwpIHJldHVybjsKICAgICAgICAgIHZhciBwZW5kYW50TWFwID0gewogICAgICAgICAgICBzdWZmaXg6ICdhcHBlbmQnLAogICAgICAgICAgICBwcmVmaXg6ICdwcmVwZW5kJwogICAgICAgICAgfTsKICAgICAgICAgIHZhciBwZW5kYW50ID0gcGVuZGFudE1hcFtwbGFjZV07CgogICAgICAgICAgaWYgKHRoaXMuJHNsb3RzW3BlbmRhbnRdKSB7CiAgICAgICAgICAgIGVsLnN0eWxlLnRyYW5zZm9ybSA9ICd0cmFuc2xhdGVYKCcgKyAocGxhY2UgPT09ICdzdWZmaXgnID8gJy0nIDogJycpICsgdGhpcy4kZWwucXVlcnlTZWxlY3RvcignLmVsLWlucHV0LWdyb3VwX18nICsgcGVuZGFudCkub2Zmc2V0V2lkdGggKyAncHgpJzsKICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIGVsLnJlbW92ZUF0dHJpYnV0ZSgnc3R5bGUnKTsKICAgICAgICAgIH0KICAgICAgICB9LAogICAgICAgIHVwZGF0ZUljb25PZmZzZXQ6IGZ1bmN0aW9uIHVwZGF0ZUljb25PZmZzZXQoKSB7CiAgICAgICAgICB0aGlzLmNhbGNJY29uT2Zmc2V0KCdwcmVmaXgnKTsKICAgICAgICAgIHRoaXMuY2FsY0ljb25PZmZzZXQoJ3N1ZmZpeCcpOwogICAgICAgIH0sCiAgICAgICAgY2xlYXI6IGZ1bmN0aW9uIGNsZWFyKCkgewogICAgICAgICAgdGhpcy4kZW1pdCgnaW5wdXQnLCAnJyk7CiAgICAgICAgICB0aGlzLiRlbWl0KCdjaGFuZ2UnLCAnJyk7CiAgICAgICAgICB0aGlzLiRlbWl0KCdjbGVhcicpOwogICAgICAgIH0sCiAgICAgICAgaGFuZGxlUGFzc3dvcmRWaXNpYmxlOiBmdW5jdGlvbiBoYW5kbGVQYXNzd29yZFZpc2libGUoKSB7CiAgICAgICAgICB2YXIgX3RoaXMyID0gdGhpczsKCiAgICAgICAgICB0aGlzLnBhc3N3b3JkVmlzaWJsZSA9ICF0aGlzLnBhc3N3b3JkVmlzaWJsZTsKICAgICAgICAgIHRoaXMuJG5leHRUaWNrKGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgX3RoaXMyLmZvY3VzKCk7CiAgICAgICAgICB9KTsKICAgICAgICB9LAogICAgICAgIGdldElucHV0OiBmdW5jdGlvbiBnZXRJbnB1dCgpIHsKICAgICAgICAgIHJldHVybiB0aGlzLiRyZWZzLmlucHV0IHx8IHRoaXMuJHJlZnMudGV4dGFyZWE7CiAgICAgICAgfSwKICAgICAgICBnZXRTdWZmaXhWaXNpYmxlOiBmdW5jdGlvbiBnZXRTdWZmaXhWaXNpYmxlKCkgewogICAgICAgICAgcmV0dXJuIHRoaXMuJHNsb3RzLnN1ZmZpeCB8fCB0aGlzLnN1ZmZpeEljb24gfHwgdGhpcy5zaG93Q2xlYXIgfHwgdGhpcy5zaG93UGFzc3dvcmQgfHwgdGhpcy5pc1dvcmRMaW1pdFZpc2libGUgfHwgdGhpcy52YWxpZGF0ZVN0YXRlICYmIHRoaXMubmVlZFN0YXR1c0ljb247CiAgICAgICAgfQogICAgICB9LAogICAgICBjcmVhdGVkOiBmdW5jdGlvbiBjcmVhdGVkKCkgewogICAgICAgIHRoaXMuJG9uKCdpbnB1dFNlbGVjdCcsIHRoaXMuc2VsZWN0KTsKICAgICAgfSwKICAgICAgbW91bnRlZDogZnVuY3Rpb24gbW91bnRlZCgpIHsKICAgICAgICB0aGlzLnNldE5hdGl2ZUlucHV0VmFsdWUoKTsKICAgICAgICB0aGlzLnJlc2l6ZVRleHRhcmVhKCk7CiAgICAgICAgdGhpcy51cGRhdGVJY29uT2Zmc2V0KCk7CiAgICAgIH0sCiAgICAgIHVwZGF0ZWQ6IGZ1bmN0aW9uIHVwZGF0ZWQoKSB7CiAgICAgICAgdGhpcy4kbmV4dFRpY2sodGhpcy51cGRhdGVJY29uT2Zmc2V0KTsKICAgICAgfQogICAgfTsgLy8gQ09OQ0FURU5BVEVEIE1PRFVMRTogLi9wYWNrYWdlcy9pbnB1dC9zcmMvaW5wdXQudnVlP3Z1ZSZ0eXBlPXNjcmlwdCZsYW5nPWpzJgoKICAgIC8qIGhhcm1vbnkgZGVmYXVsdCBleHBvcnQgKi8KCiAgICB2YXIgc3JjX2lucHV0dnVlX3R5cGVfc2NyaXB0X2xhbmdfanNfID0gaW5wdXR2dWVfdHlwZV9zY3JpcHRfbGFuZ19qc187IC8vIEVYVEVSTkFMIE1PRFVMRTogLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvcnVudGltZS9jb21wb25lbnROb3JtYWxpemVyLmpzCgogICAgdmFyIGNvbXBvbmVudE5vcm1hbGl6ZXIgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDApOyAvLyBDT05DQVRFTkFURUQgTU9EVUxFOiAuL3BhY2thZ2VzL2lucHV0L3NyYy9pbnB1dC52dWUKCiAgICAvKiBub3JtYWxpemUgY29tcG9uZW50ICovCgoKICAgIHZhciBjb21wb25lbnQgPSBPYmplY3QoY29tcG9uZW50Tm9ybWFsaXplclsiYSIKICAgIC8qIGRlZmF1bHQgKi8KICAgIF0pKHNyY19pbnB1dHZ1ZV90eXBlX3NjcmlwdF9sYW5nX2pzXywgcmVuZGVyLCBzdGF0aWNSZW5kZXJGbnMsIGZhbHNlLCBudWxsLCBudWxsLCBudWxsKTsKICAgIC8qIGhvdCByZWxvYWQgKi8KCiAgICBpZiAoZmFsc2UpIHsKICAgICAgdmFyIGFwaTsKICAgIH0KCiAgICBjb21wb25lbnQub3B0aW9ucy5fX2ZpbGUgPSAicGFja2FnZXMvaW5wdXQvc3JjL2lucHV0LnZ1ZSI7CiAgICAvKiBoYXJtb255IGRlZmF1bHQgZXhwb3J0ICovCgogICAgdmFyIGlucHV0ID0gY29tcG9uZW50LmV4cG9ydHM7IC8vIENPTkNBVEVOQVRFRCBNT0RVTEU6IC4vcGFja2FnZXMvaW5wdXQvaW5kZXguanMKCiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqLwoKICAgIGlucHV0Lmluc3RhbGwgPSBmdW5jdGlvbiAoVnVlKSB7CiAgICAgIFZ1ZS5jb21wb25lbnQoaW5wdXQubmFtZSwgaW5wdXQpOwogICAgfTsKICAgIC8qIGhhcm1vbnkgZGVmYXVsdCBleHBvcnQgKi8KCgogICAgdmFyIHBhY2thZ2VzX2lucHV0ID0gX193ZWJwYWNrX2V4cG9ydHNfX1siZGVmYXVsdCJdID0gaW5wdXQ7CiAgICAvKioqLwogIH0sCgogIC8qKiovCiAgOToKICAvKioqLwogIGZ1bmN0aW9uIF8obW9kdWxlLCBleHBvcnRzKSB7CiAgICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoImVsZW1lbnQtdWkvbGliL3V0aWxzL21lcmdlIik7CiAgICAvKioqLwogIH0KICAvKioqKioqLwoKfSk7"},null]}